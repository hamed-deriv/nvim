import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Paint Movement Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<Offset> _positions = [
    Offset.zero,
    Offset(100, 100),
    Offset(200, 200),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Paint Movement Demo'),
      ),
      body: Center(
        child: Stack(
          children: List.generate(
            _positions.length,
            (index) => MyCustomPaint(
              position: _positions[index],
            ),
          ),
        ),
      ),
    );
  }
}

class MyCustomPaint extends StatefulWidget {
  final Offset position;

  MyCustomPaint({required this.position});

  @override
  _MyCustomPaintState createState() => _MyCustomPaintState();
}

class _MyCustomPaintState extends State<MyCustomPaint> {
  late Offset _position;

  @override
  void initState() {
    super.initState();
    _position = widget.position;
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onPanUpdate: (details) {
        setState(() {
          _position += details.delta;
        });
      },
      child: Transform.translate(
        offset: _position,
        child: CustomPaint(
          painter: MyPainter(),
          size: Size(double.infinity, double.infinity),
        ),
      ),
    );
  }
}

class MyPainter extends CustomPainter {
  final rectPaint = Paint()..color = Colors.red;
  final circlePaint = Paint()..color = Colors.blue;

  Size _size = Size(0, 0);

  @override
  void paint(Canvas canvas, Size size) {
    _size = size;
    canvas.drawCircle(Offset(size.width / 2, size.height / 2), 50, circlePaint);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => true;

  @override
  bool hitTest(Offset position) {
    final circle = Offset(_size.width / 2, _size.height / 2);
    final circleRadius = 50;

    // Check if the position is inside the circle
    final distance = (position - circle).distance;
    return distance <= circleRadius;
  }
}
